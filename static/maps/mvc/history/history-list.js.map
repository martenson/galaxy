{"version":3,"sources":["mvc/history/history-list.js"],"names":["HistoryGridView","_gridView2","default","extend","initialize","grid_config","this","ajaxQueue","_ajaxQueue2","AjaxQueue","prototype","call","init_grid_elements","stop","$","makeArray","$el","find","map","i","el","historyId","data","url","Galaxy","root","options","stateHtml","type","success","contentsStates","req","state","stateCount","deleted","contentsActive","hidden","html","jQuery","forEach","start","_showCopyDialog","id","history","_historyModel2","fail","done","_copyDialog2","window","parent","currHistoryPanel","loadCurrentHistory","fetchDetails","reload","popup","operation","item","self","fetch","label","alert","onclick","settings","allowed","allow_popup","href","url_args","target","confirmation_text","confirm","_add_operation","e","operation_config","encode_id","execute","findItemByHtml","func","model","Backbone","Model","action_id","param","params","response","set","render","View","attributes","title","empty","append","grid"],"mappings":"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","file":"../../../scripts/mvc/history/history-list.js","sourcesContent":["import _l from \"utils/localization\";\nimport AjaxQueue from \"utils/ajax-queue\";\nimport Utils from \"utils/utils\";\n/** This class renders the grid list. */\nimport GridView from \"mvc/grid/grid-view\";\nimport HistoryModel from \"mvc/history/history-model\";\nimport historyCopyDialog from \"mvc/history/copy-dialog\";\n\nvar HistoryGridView = GridView.extend({\n    initialize: function(grid_config) {\n        this.ajaxQueue = new AjaxQueue.AjaxQueue();\n        GridView.prototype.initialize.call(this, grid_config);\n    },\n\n    init_grid_elements: function() {\n        const ajaxQueue = this.ajaxQueue;\n        ajaxQueue.stop();\n        GridView.prototype.init_grid_elements.call(this);\n        const fetchDetails = $.makeArray(\n            this.$el.find(\".delayed-value-datasets_by_state\").map((i, el) => {\n                return () => {\n                    const historyId = $(el).data(\"history-id\");\n                    const url = `${\n                        Galaxy.root\n                    }api/histories/${historyId}?keys=nice_size,contents_active,contents_states`;\n                    const options = {};\n                    options.url = url;\n                    options.type = \"GET\";\n                    options.success = req => {\n                        const contentsStates = req[\"contents_states\"];\n                        let stateHtml = \"\";\n                        for (let state of [\"ok\", \"running\", \"queued\", \"new\", \"error\"]) {\n                            const stateCount = contentsStates[state];\n                            if (stateCount) {\n                                stateHtml += `<div class=\"count-box state-color-${state}\" title=\"Datasets in ${state} state\">${stateCount}</div> `;\n                            }\n                        }\n                        const contentsActive = req[\"contents_active\"];\n                        const deleted = contentsActive[\"deleted\"];\n                        if (deleted) {\n                            stateHtml += `<div class=\"count-box state-color-deleted\" title=\"Deleted datasets\">${deleted}</div> `;\n                        }\n                        const hidden = contentsActive[\"hidden\"];\n                        if (hidden) {\n                            stateHtml += `<div class=\"count-box state-color-hidden\" title=\"Hidden datasets\">${hidden}</div> `;\n                        }\n                        $(`.delayed-value-datasets_by_state[data-history-id='${historyId}']`).html(stateHtml);\n                        $(`.delayed-value-disk_size[data-history-id='${historyId}']`).html(req[\"nice_size\"]);\n                    };\n                    var xhr = jQuery.ajax(options);\n                    return xhr;\n                };\n            })\n        );\n        fetchDetails.forEach(fn => ajaxQueue.add(fn));\n        ajaxQueue.start();\n    },\n    _showCopyDialog: function(id) {\n        var history = new HistoryModel.History({ id: id });\n        history\n            .fetch()\n            .fail(() => {\n                alert(\"History could not be fetched. Please contact an administrator\");\n            })\n            .done(() => {\n                historyCopyDialog(history, {}).done(() => {\n                    if (window.parent && window.parent.Galaxy && window.parent.Galaxy.currHistoryPanel) {\n                        window.parent.Galaxy.currHistoryPanel.loadCurrentHistory();\n                    }\n                    window.location.reload(true);\n                });\n            });\n    },\n    /** Add an operation to the items menu */\n    _add_operation: function(popup, operation, item) {\n        var self = this;\n        var settings = item.operation_config[operation.label];\n        if (operation.label == \"Copy\") {\n            operation.onclick = id => {\n                self._showCopyDialog(id);\n            };\n        }\n        if (settings.allowed && operation.allow_popup) {\n            popup.addItem({\n                html: operation.label,\n                href: settings.url_args,\n                target: settings.target,\n                confirmation_text: operation.confirm,\n                func: function(e) {\n                    e.preventDefault();\n                    var label = $(e.target).html();\n                    if (operation.onclick) {\n                        operation.onclick(item.encode_id);\n                    } else {\n                        self.execute(this.findItemByHtml(label));\n                    }\n                }\n            });\n        }\n    }\n});\n\nvar View = Backbone.View.extend({\n    title: _l(\"Histories\"),\n    initialize: function(options) {\n        var self = this;\n        this.setElement($(\"<div/>\"));\n        this.model = new Backbone.Model();\n        Utils.get({\n            url: `${Galaxy.root}history/${options.action_id}?${$.param(Galaxy.params)}`,\n            success: function(response) {\n                self.model.set(response);\n                self.render();\n            }\n        });\n    },\n\n    render: function() {\n        var grid = new HistoryGridView(this.model.attributes);\n        this.$el.empty().append(grid.$el);\n    }\n});\n\nexport default {\n    View: View\n};\n"]}