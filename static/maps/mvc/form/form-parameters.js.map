{"version":3,"sources":["mvc/form/form-parameters.js"],"names":["Backbone","Model","extend","types","text","password","select","data_column","genomebuild","data","data_collection","integer","float","boolean","drill_down","color","hidden","hidden_data","baseurl","this","input_def","type","fieldClass","call","upload","options","_fieldSelect","_fieldText","emit","debug","undefined","value","ftpfile","_fieldData","create","_uiSelectContent2","default","id","extensions","optional","field","Galaxy","flavor","onchange","is_workflow","multiple","_","each","option","label","SelectClass","_uiMisc2","Select","display","error_text","Radio","RadioButton","View","readonly","individual","searchable","_fieldDrilldown","area","_utils2","isEmpty","i","str_value","isArray","datalist","_fieldSlider","Slider","precise","_fieldHidden","Hidden","info","min","max","_fieldColor","_fieldLibrary","_uiSelectGenomespace2"],"mappings":"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","file":"../../../scripts/mvc/form/form-parameters.js","sourcesContent":["/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport SelectContent from \"mvc/ui/ui-select-content\";\nimport SelectLibrary from \"mvc/ui/ui-select-library\";\nimport SelectFtp from \"mvc/ui/ui-select-ftp\";\nimport SelectGenomeSpace from \"mvc/ui/ui-select-genomespace\";\nimport ColorPicker from \"mvc/ui/ui-color-picker\";\n// create form view\nexport default Backbone.Model.extend({\n    /** Available parameter types */\n    types: {\n        text: \"_fieldText\",\n        password: \"_fieldText\",\n        select: \"_fieldSelect\",\n        data_column: \"_fieldSelect\",\n        genomebuild: \"_fieldSelect\",\n        data: \"_fieldData\",\n        data_collection: \"_fieldData\",\n        integer: \"_fieldSlider\",\n        float: \"_fieldSlider\",\n        boolean: \"_fieldBoolean\",\n        drill_down: \"_fieldDrilldown\",\n        color: \"_fieldColor\",\n        hidden: \"_fieldHidden\",\n        hidden_data: \"_fieldHidden\",\n        baseurl: \"_fieldHidden\",\n        library_data: \"_fieldLibrary\",\n        ftpfile: \"_fieldFtp\",\n        upload: \"_fieldUpload\",\n        genomespacefile: \"_fieldGenomeSpace\"\n    },\n\n    /** Returns an input field for a given field type */\n    create: function(input_def) {\n        var fieldClass = this.types[input_def.type];\n        var field = typeof this[fieldClass] === \"function\" ? this[fieldClass].call(this, input_def) : null;\n        if (!field) {\n            field = input_def.options ? this._fieldSelect(input_def) : this._fieldText(input_def);\n            Galaxy.emit.debug(\"form-parameters::_addRow()\", `Auto matched field type (${input_def.type}).`);\n        }\n        if (input_def.value === undefined) {\n            input_def.value = null;\n        }\n        field.value(input_def.value);\n        return field;\n    },\n\n    /** Data input field */\n    _fieldData: function(input_def) {\n        return new SelectContent.View({\n            id: `field-${input_def.id}`,\n            extensions: input_def.extensions,\n            optional: input_def.optional,\n            multiple: input_def.multiple,\n            type: input_def.type,\n            flavor: input_def.flavor,\n            data: input_def.options,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Select/Checkbox/Radio options field */\n    _fieldSelect: function(input_def) {\n        // show text field e.g. in workflow editor\n        if (input_def.is_workflow) {\n            return this._fieldText(input_def);\n        }\n\n        // customize properties\n        if (input_def.type == \"data_column\") {\n            input_def.error_text = \"Missing columns in referenced dataset.\";\n        }\n\n        // identify available options\n        var data = input_def.data;\n        if (!data) {\n            data = [];\n            _.each(input_def.options, option => {\n                data.push({ label: option[0], value: option[1] });\n            });\n        }\n\n        // identify display type\n        var SelectClass = Ui.Select;\n        switch (input_def.display) {\n            case \"checkboxes\":\n                SelectClass = Ui.Checkbox;\n                break;\n            case \"radio\":\n                SelectClass = Ui.Radio;\n                break;\n            case \"radiobutton\":\n                SelectClass = Ui.RadioButton;\n                break;\n        }\n\n        // create select field\n        return new SelectClass.View({\n            id: `field-${input_def.id}`,\n            data: data,\n            error_text: input_def.error_text || \"No options available\",\n            readonly: input_def.readonly,\n            multiple: input_def.multiple,\n            optional: input_def.optional,\n            onchange: input_def.onchange,\n            individual: input_def.individual,\n            searchable: input_def.flavor !== \"workflow\"\n        });\n    },\n\n    /** Drill down options field */\n    _fieldDrilldown: function(input_def) {\n        // show text field e.g. in workflow editor\n        if (input_def.is_workflow) {\n            return this._fieldText(input_def);\n        }\n\n        // create drill down field\n        return new Ui.Drilldown.View({\n            id: `field-${input_def.id}`,\n            data: input_def.options,\n            display: input_def.display,\n            optional: input_def.optional,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Text input field */\n    _fieldText: function(input_def) {\n        // field replaces e.g. a select field\n        if (input_def.options && input_def.data) {\n            input_def.area = input_def.multiple;\n            if (Utils.isEmpty(input_def.value)) {\n                input_def.value = null;\n            } else {\n                if ($.isArray(input_def.value)) {\n                    var str_value = \"\";\n                    for (var i in input_def.value) {\n                        str_value += String(input_def.value[i]);\n                        if (!input_def.multiple) {\n                            break;\n                        }\n                        str_value += \"\\n\";\n                    }\n                    input_def.value = str_value;\n                }\n            }\n        }\n        // create input element\n        return new Ui.Input({\n            id: `field-${input_def.id}`,\n            type: input_def.type,\n            area: input_def.area,\n            readonly: input_def.readonly,\n            placeholder: input_def.placeholder,\n            datalist: input_def.datalist,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Slider field */\n    _fieldSlider: function(input_def) {\n        return new Ui.Slider.View({\n            id: `field-${input_def.id}`,\n            precise: input_def.type == \"float\",\n            is_workflow: input_def.is_workflow,\n            min: input_def.min,\n            max: input_def.max,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Hidden field */\n    _fieldHidden: function(input_def) {\n        return new Ui.Hidden({\n            id: `field-${input_def.id}`,\n            info: input_def.info\n        });\n    },\n\n    /** Boolean field */\n    _fieldBoolean: function(input_def) {\n        return new Ui.RadioButton.View({\n            id: `field-${input_def.id}`,\n            data: [{ label: \"Yes\", value: \"true\" }, { label: \"No\", value: \"false\" }],\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Color picker field */\n    _fieldColor: function(input_def) {\n        return new ColorPicker({\n            id: `field-${input_def.id}`,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Library dataset field */\n    _fieldLibrary: function(input_def) {\n        return new SelectLibrary.View({\n            id: `field-${input_def.id}`,\n            optional: input_def.optional,\n            multiple: input_def.multiple,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** FTP file field */\n    _fieldFtp: function(input_def) {\n        return new SelectFtp.View({\n            id: `field-${input_def.id}`,\n            optional: input_def.optional,\n            multiple: input_def.multiple,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** GenomeSpace file select field\n     */\n    _fieldGenomeSpace: function(input_def) {\n        var self = this;\n        return new SelectGenomeSpace.View({\n            id: `field-${input_def.id}`,\n            onchange: input_def.onchange\n        });\n    },\n\n    /** Upload file field */\n    _fieldUpload: function(input_def) {\n        return new Ui.Upload({\n            id: `field-${input_def.id}`,\n            onchange: input_def.onchange\n        });\n    }\n});\n"]}