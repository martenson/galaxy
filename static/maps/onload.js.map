{"version":3,"sources":["onload.js"],"names":["replace_big_select_inputs","min_length","max_length","select_elts","refresh_select2","element","options","panels","closeOnSelect","$","is","dropdownAutoWidth","containerCssClass","select2","window","make_popup_menus","undefined","select_elt","placeholder","find","length","num_options","hasClass","init_refresh_on_change","off","change","select_field","this","select_val","val","ref_on_change_vals","attr","split","last_selected_value","inArray","trigger","get","form","submit","click","document","confirm","jQuery","_","Backbone","_panel2","default","extend","_modal2","async_save_text","_asyncSaveText2","make_popupmenu","_popupmenu2","init_tag_click_function","_autocom_tagging2","href","Galaxy","root","enable_webhooks","anchor","type","webhooks","each","model","webhook","toJSON","activeGalaxyTourRunner","script","_utils2","appendScriptStyle","callback","fn","tooltip","placement","galaxy_main_exists","parent","frames","galaxy_main","indexOf","onloadWebhooks"],"mappings":"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","file":"../scripts/onload.js","sourcesContent":["// ============================================================================\n// Globals (temporary)\n// ============================================================================\n// HACK: add these to global scope until we stop asking for them there...\n// Via webpack: these are required here automatically by the provider plugin\n// Via script tag: these are redundant (identities) since they're already global\nwindow[\"jQuery\"] = jQuery; // a weird form to prevent webpack from sub'ing 'window.jQuery' in the provider plugin\nwindow.$ = jQuery;\nwindow._ = _;\nwindow.Backbone = Backbone;\n// console.debug('globals loaded:', window.jQuery, window.Backbone, '...');\n\n// these are galaxy globals not defined in the provider (although they could be - but why encourage that?)\nimport Panel from \"layout/panel\";\nwindow.panels = Panel;\n\n// using extend bc there are multiple fns/objs to decorate the window with\nimport layout_modal from \"layout/modal\";\n_.extend(window, layout_modal);\nimport async_save_text from \"utils/async-save-text\";\nwindow.async_save_text = async_save_text;\nimport Popupmenu from \"ui/popupmenu\";\nwindow.make_popupmenu = Popupmenu.make_popupmenu;\nwindow.make_popup_menus = Popupmenu.make_popup_menus;\nimport init_tag_click_function from \"ui/autocom_tagging\";\nwindow.init_tag_click_function = init_tag_click_function;\nimport Tours from \"mvc/tours\";\nimport Webhooks from \"mvc/webhooks\";\nimport Utils from \"utils/utils\";\n// console.debug( 'galaxy globals loaded' );\n\n// ============================================================================\n// jquery on document ready\n// ============================================================================\n// Replace select box with a text input box + autocomplete.\nfunction replace_big_select_inputs(min_length, max_length, select_elts) {\n    function refresh_select2(element) {\n        var select_elt = $(element);\n        var options = {\n            placeholder: \"Click to select\",\n            closeOnSelect: !select_elt.is(\"[MULTIPLE]\"),\n            dropdownAutoWidth: true,\n            containerCssClass: \"select2-minwidth\"\n        };\n        return element.select2(options);\n    }\n\n    // To do replace, the select2 plugin must be loaded.\n    if (!jQuery.fn.select2) {\n        return;\n    }\n\n    // Set default for min_length and max_length\n    if (min_length === undefined) {\n        min_length = 20;\n    }\n    if (max_length === undefined) {\n        max_length = 3000;\n    }\n\n    select_elts = select_elts || $(\"select\");\n\n    select_elts.each(function() {\n        var select_elt = $(this).not(\"[multiple]\");\n        // Make sure that options is within range.\n        var num_options = select_elt.find(\"option\").length;\n        if (num_options < min_length || num_options > max_length) {\n            return;\n        }\n\n        if (select_elt.hasClass(\"no-autocomplete\")) {\n            return;\n        }\n\n        /* Replaced jQuery.autocomplete with select2, notes:\n         * - multiple selects are supported\n         * - the original element is updated with the value, convert_to_values should not be needed\n         * - events are fired when updating the original element, so refresh_on_change should just work\n         *\n         * - should we still sort dbkey fields here?\n         */\n        refresh_select2(select_elt);\n    });\n}\n\n// Initialize refresh events.\nfunction init_refresh_on_change() {\n    $(\"select[refresh_on_change='true']\")\n        .off(\"change\")\n        .change(function() {\n            var select_field = $(this);\n            var select_val = select_field.val();\n            var ref_on_change_vals = select_field.attr(\"refresh_on_change_values\");\n            if (ref_on_change_vals) {\n                ref_on_change_vals = ref_on_change_vals.split(\",\");\n                var last_selected_value = select_field.attr(\"last_selected_value\");\n                if (\n                    $.inArray(select_val, ref_on_change_vals) === -1 &&\n                    $.inArray(last_selected_value, ref_on_change_vals) === -1\n                ) {\n                    return;\n                }\n            }\n            $(window).trigger(\"refresh_on_change\");\n            $(document).trigger(\"convert_to_values\"); // Convert autocomplete text to values\n            select_field.get(0).form.submit();\n        });\n\n    // checkboxes refresh on change\n    $(\":checkbox[refresh_on_change='true']\")\n        .off(\"click\")\n        .click(function() {\n            var select_field = $(this);\n            var select_val = select_field.val();\n            var ref_on_change_vals = select_field.attr(\"refresh_on_change_values\");\n            if (ref_on_change_vals) {\n                ref_on_change_vals = ref_on_change_vals.split(\",\");\n                var last_selected_value = select_field.attr(\"last_selected_value\");\n                if (\n                    $.inArray(select_val, ref_on_change_vals) === -1 &&\n                    $.inArray(last_selected_value, ref_on_change_vals) === -1\n                ) {\n                    return;\n                }\n            }\n            $(window).trigger(\"refresh_on_change\");\n            select_field.get(0).form.submit();\n        });\n\n    // Links with confirmation\n    $(\"a[confirm]\")\n        .off(\"click\")\n        .click(function() {\n            return confirm($(this).attr(\"confirm\"));\n        });\n}\n// used globally in grid-view\nwindow.init_refresh_on_change = init_refresh_on_change;\n\n$(document).ready(() => {\n    // Refresh events for form fields.\n    init_refresh_on_change();\n\n    // Tooltips\n    if ($.fn.tooltip) {\n        // Put tooltips below items in panel header so that they do not overlap masthead.\n        $(\".unified-panel-header [title]\").tooltip({ placement: \"bottom\" });\n\n        // default tooltip initialization, it will follow the data-placement tag for tooltip location\n        // and fallback to 'top' if not present\n        $(\"[title]\").tooltip();\n    }\n    // Make popup menus.\n    Popupmenu.make_popup_menus();\n\n    // Replace big selects.\n    replace_big_select_inputs(20, 1500);\n\n    // If galaxy_main frame does not exist and link targets galaxy_main,\n    // add use_panels=True and set target to self.\n    $(\"a\").click(function() {\n        var anchor = $(this);\n        var galaxy_main_exists = window.parent.frames && window.parent.frames.galaxy_main;\n        if (anchor.attr(\"target\") == \"galaxy_main\" && !galaxy_main_exists) {\n            var href = anchor.attr(\"href\");\n            if (href.indexOf(\"?\") == -1) {\n                href += \"?\";\n            } else {\n                href += \"&\";\n            }\n            href += \"use_panels=True\";\n            anchor.attr(\"href\", href);\n            anchor.attr(\"target\", \"_self\");\n        }\n        return anchor;\n    });\n\n    Tours.activeGalaxyTourRunner();\n\n    function onloadWebhooks() {\n        if (Galaxy.root !== undefined) {\n            if (Galaxy.config.enable_webhooks) {\n                // Load all webhooks with the type 'onload'\n                Webhooks.load({\n                    type: \"onload\",\n                    callback: function(webhooks) {\n                        webhooks.each(model => {\n                            var webhook = model.toJSON();\n                            if (webhook.activate && webhook.script) {\n                                Utils.appendScriptStyle(webhook);\n                            }\n                        });\n                    }\n                });\n            }\n        } else {\n            setTimeout(onloadWebhooks, 100);\n        }\n    }\n    onloadWebhooks();\n});\n"]}